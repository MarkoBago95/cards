version: "3.9"

services:
  postgres:
    image: postgres:16
    container_name: cards-postgres
    environment:
      POSTGRES_DB: cards
      POSTGRES_USER: cards
      POSTGRES_PASSWORD: cards
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cards -d cards"]
      interval: 5s
      timeout: 3s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: cards-pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  kafka:
    image: bitnami/kafka:3.7
    container_name: cards-kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092   # unutar compose mreže
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/9092'"]
      interval: 10s
      timeout: 5s
      retries: 15

  backend:
    build:
      context: ./cards
      dockerfile: Dockerfile
    container_name: cards-backend
    environment:
      # Datasource (direkt bez profila)
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/cards
      SPRING_DATASOURCE_USERNAME: cards
      SPRING_DATASOURCE_PASSWORD: cards
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # External API
      APP_EXTERNAL_BASE_URL: https://api.something.com/v1
      APP_EXTERNAL_CARD_REQUEST_PATH: /api/v1/card-request
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 15

  frontend:
    build:
      context: ./frontend
    container_name: cards-frontend
    ports:
      - "4200:80"
    depends_on:
      backend:
        condition: service_started
    # SPA fallback rješen u frontend Dockerfile-u (nginx conf)
    
  frontend-react:
    build:
        context: ./frontend-react
        dockerfile: Dockerfile
    container_name: cards-frontend-react
    ports:
    - "5173:80"     # React na drugom portu
    depends_on:
        backend:
            condition: service_started

volumes:
  pgdata:
  pgadmin_data:
